var fs = require('fs')
  , path = require('path')
  , Routes = require('./routes')
  , _ = require('underscore')
  , Q = require('q')
  ;

function FileList (opts) {
  var self = this;
  self.opts = opts || {};
  self.Routes = Routes(self.opts);

  return this;
};

FileList.prototype.listAll = function listAll (directory) {
  var self = this
    , deferred = Q.defer()
    , baseDir = self.opts[directory]
    ;

  FileList.stillNeedArr = [];
  console.log( fs.readdirSync(baseDir) )
  self.opts.libs.filelister.readDir(baseDir).then(function(results) {
    console.log('25',FileList.stillNeedArr);
    // console.log(results[0].sub)
    if( FileList.stillNeedArr.length === 0 ) {
      console.log('ONCE!!!!!!!!!!!!!!!!!!!')
      console.log(results[0])
      deferred.resolve(results);
    } else {
      console.log('ELSE!!!!!!!!!!!!!!!');
      //deferred.resolve(results);
      console.log(results)
      // _.each(FileList.stillNeedArr, function (still) {
      //   console.log('NO results', still)
      //   self.opts.libs.filelister.readDir(still).then(function(results) {
      //     console.log(results)
      //     //deferred.resolve(results);
      //   });

      // });
      //self.opts.libs.filelister.readDir(baseDir).then(function(results) {
    }
  });

  // setTimeout(function(){
  //   deferred.resolve(['AAAAAAAAAAAA']);
  // },10000);
  return deferred.promise;
};

FileList.prototype.getFile = function getFile (filename, type) {
  var self = this
    , deferred = Q.defer()
    ;

  fs.readFile(filename + '.' + type, 'utf8', function (err, data) {
    deferred.resolve(data);
  });

  return deferred.promise;
};

FileList.prototype.getFolderContents = function getFolderContents (folder) {

};

FileList.prototype.readDir = function readDir (folder) {
  // console.log('START!!!!!!!!!', path.basename(folder) )
  var self = this
    , deferred = Q.defer()
    , results = []
    , regexValid = /^\./
    ;

  // var indexOFStill = FileList.stillNeedArr.indexOf(path.basename(folder));
  // console.log(FileList.stillNeedArr)
  // if( indexOFStill != -1) {
  //   FileList.stillNeedArr.splice(indexOFStill, indexOFStill + 1);
  // }

  fs.readdir(folder, function (err, files) {
    // console.log('START', path.basename(folder))
    var folderObj = {
            name : path.basename(folder)
          , sub : []
        }
      ;
      // console.log(files);
    if ( files.length === 0 ) {
      //console.log('NULL')


      var indexOFStill = FileList.stillNeedArr.indexOf( folder );//path.basename(folder));
      if( indexOFStill != -1) {
        FileList.stillNeedArr.splice(indexOFStill, indexOFStill + 1);
      }
      // console.log(FileList.stillNeedArr)
      results.push(folderObj);
      //deferred.resolve(results);
      // _.each(FileList.stillNeedArr, function (stillNeed) {
      //   console.log('NAME',stillNeed)
      //   //console.log('FOLDER', folder)
      //   // var subFolder = folder + '/' + stillNeed.name;
      //   // console.log(subFolder)
      //   // if( stillNeed != '/Users/efernie/otherprojects/site-editor/server/node_modules' ) {
      //   //   self.opts.libs.filelister.readDir(stillNeed).then(function(subResults) {
      //   //     console.log('AFTER',subResults)
      //   //     _.each( subResults, function(sub) {
      //   //       folderObj.sub.push(sub);
      //   //     });
      //   //   });
      //   //   results.push(folderObj);
      //   // }
      // });

    }
    _.each(files, function (file) {
      var fileObj = {
        parentDir : path.basename(folder)
      };
      // Get rid of hidden files or unneeded ones
      if ( !regexValid.test(file) ) {
        if( path.extname(file) ) {
          fileObj.isFile = true;
          fileObj.name = file;
          fileObj.type = path.extname(file);
          folderObj.sub.push(fileObj);
          // console.log(folderObj)
        } else {
          fileObj.isFile = false;
          fileObj.name = file;
          // console.log('name',fileObj.name)
        }
      }

      var indexOFStill = FileList.stillNeedArr.indexOf(folder);//path.basename(folder));
      if( indexOFStill != -1) {
        FileList.stillNeedArr.splice(indexOFStill, indexOFStill + 1);
      }

      // console.log(folderObj)
      if( fileObj.isFile === false ) {
        var subFolder = folder + '/' + fileObj.name;
        // console.log(subFolder)
        if( subFolder != '/Users/efernie/otherprojects/site-editor/server/node_modules' ) {
          FileList.stillNeedArr.push( subFolder );//fileObj.name);
          self.opts.libs.filelister.readDir(subFolder).then(function(subResults) {
            // console.log(subResults)
            _.each( subResults, function(sub) {
              folderObj.sub.push(sub);
            });
          });
        }
      }
    });
    console.log('resutls',folderObj)
    results.push(folderObj);
    // console.log('after res', results)

    deferred.resolve(results);
  });

  return deferred.promise;
};

module.exports = function (opts) {
  return new FileList(opts);
};