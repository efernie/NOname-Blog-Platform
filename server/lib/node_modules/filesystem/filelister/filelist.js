var fs = require('fs')
  , path = require('path')
  , Routes = require('./routes')
  , _ = require('underscore')
  , Q = require('q')
  ;

function FileList (opts) {
  var self = this;
  self.opts = opts || {};
  self.Routes = Routes(self.opts);

  return this;
};

FileList.prototype.listAll = function listAll (directory) {
  var self = this
    , deferred = Q.defer()
    , baseDir = self.opts[directory]
    ;

  self.opts.libs.filelister.readDirectory(baseDir).then(function (results) {
    deferred.resolve(results);
  });

  return deferred.promise;
};

FileList.prototype.getFile = function getFile (filename, type) {
  var self = this
    , deferred = Q.defer()
    ;

  fs.readFile(filename + '.' + type, 'utf8', function (err, data) {
    deferred.resolve(data);
  });

  return deferred.promise;
};

FileList.prototype.getFolderContents = function getFolderContents ( folder ) {

};

FileList.prototype.readDirectory = function readDirectory ( folder ) {
  var self = this
    , results = []
    , stillNeedArr = []
    , requireModules = false
    , regexValid = /^\./
    , deferred = Q.defer()
    , baseFolderNameArr = folder.split('/')
    , baseFolderName = baseFolderNameArr[baseFolderNameArr.length - 2]  + '/' + baseFolderNameArr[baseFolderNameArr.length - 1]
    , baseFolder = { base : baseFolderName }
    ;

  results.push( baseFolder );
  readDirectory(folder);

  function readDirectory (folder) {
    var indexOFStill = stillNeedArr.indexOf(folder);
    if( indexOFStill != -1 ) {
      stillNeedArr.splice(indexOFStill, indexOFStill + 1);
    }

    var parentFolderArr = folder.split('/')
      , shortParent = parentFolderArr[parentFolderArr.length - 2]  + '/' + parentFolderArr[parentFolderArr.length - 1]
      ;

    fs.readdir( folder , function (err, files) {
      _.each(files, function (file) {
        if ( !regexValid.test(file) ) {
          if( path.extname(file) ) {
            var fileObj = {
              name : file,
              type : path.extname(file),
              parent : shortParent
            };
            results.push( fileObj );
          } else {
            var folderObj = {
              name : file,
              type : 'folder',
              parent : shortParent
            };

            var subFolder = folder + '/' + folderObj.name;
            if ( requireModules === false ) {
              if ( subFolder != self.opts.baseDir + '/node_modules') {
                stillNeedArr.push( subFolder );
                results.push(folderObj);
              }
            } else {
              stillNeedArr.push( subFolder );
              results.push(folderObj);
            }
          }
        }
      });

      if ( stillNeedArr.length > 0 ){
        readDirectory(stillNeedArr[0]);
      } else {
        deferred.resolve(results);

      }
    });
  }
  return deferred.promise;
}

module.exports = function (opts) {
  return new FileList(opts);
};